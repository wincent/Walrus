#!/usr/bin/env ruby
# Copyright 2007-2014 Greg Hurrell. All rights reserved.
# Licensed under the terms of the BSD 2-clause license.

module Walrus
  # Exit statuses.
  #
  # @see for other exit statuses see {Walrus::Runner}.
  module Exit
    # Indicates that requiring a component of Walrus failed.
    #
    # This is usually caused because Walrus is not properly installed, or the
    # environment is not set up with the correct load path.
    LOAD_ERROR = 1

    # Indicates the run was interrupted by the user (for example, with
    # Control-C).
    INTERRUPT_ERROR = 2

    # Indicates that the user did not provide a correct set of command line
    # arguments.
    ARGUMENT_ERROR = 3

    # Indicates that an unknown (internal) error occurred.
    UNKNOWN_ERROR = 4
  end # module Exit

  begin
    require 'walrus/runner'
  rescue LoadError => e
    $stderr.puts <<-ERROR.gsub(/ {6}/, '')
      :: error: load error (#{e})

      If you are trying to run Walrus but have not yet installed it, it may be
      that Ruby cannot find the Walrus files. You can help Ruby to find the
      Walrus "lib" directory by adding it to the RUBYLIB environment variable.
      For example, you could do the following if you are using the Bash shell,
      substituting the absolute path for "lib":

        export RUBYLIB="lib:${RUBYLIB}"
    ERROR
    exit Exit::LOAD_ERROR
  end

  exit_status = 0
  begin
    exit_status = Runner.new.run
  rescue SystemExit => e
    # normally raised for "--version" or "--help" switches
  rescue Interrupt => e
    $stderr.puts ':: aborting: interrupt'
    exit Exit::INTERRUPT_ERROR
  rescue Runner::ArgumentError => e
    $stderr.puts ":: error: #{e}",
      "For usage information type: #{$0} --help"
    exit Exit::ARGUMENT_ERROR
  rescue Runner::Error => e
    $stderr.puts ":: error: #{e}"
    exit e.exit_status
  rescue Exception => e
    $stderr.puts ":: error: #{e}"
    exit Exit::UNKNOWN_ERROR
  end
  exit exit_status
end # module Walrus
