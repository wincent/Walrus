#!/usr/bin/env ruby
# Copyright 2007-2010 Wincent Colaiuta. All rights reserved.
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

module Walrus
  EXIT_LOAD_ERROR     = 1
  EXIT_ARGUMENT_ERROR = 2
  EXIT_OTHER_ERROR    = 3
  EXIT_UNKNOWN_ERROR  = 4

  begin
    require 'walrus/runner'
  rescue LoadError => e
    $stderr.puts <<-ERROR.gsub(/ {6}/, '')
      :: error: load error (#{e})

      If you are trying to run Walrus but have not yet installed it, it may be
      that Ruby cannot find the Walrus files. You can help Ruby to find the
      Walrus "lib" directory by adding it to the RUBYLIB environment variable.
      For example, you could do the following if you are using the Bash shell,
      substituting the absolute path for "lib":

        export RUBYLIB="${RUBYLIB}:lib"
    ERROR
    exit EXIT_LOAD_ERROR
  end

  begin
    Runner.new.run
  rescue SystemExit => e
    # normally raised for "--version" or "--help" switches
  rescue Interrupt => e
    $stderr.puts ':: aborting: interrupt'
    exit EXIT_OTHER_ERROR
  rescue Runner::ArgumentError => e
    $stderr.puts ":: error: #{e}",
      "For usage information type: #{$0} --help"
    exit EXIT_ARGUMENT_ERROR
  rescue Runner::Error => e
    $stderr.puts ":: error: #{e}"
    exit EXIT_OTHER_ERROR
  rescue Exception => e
    $stderr.puts ":: error: #{e}"
    exit EXIT_UNKNOWN_ERROR
  end
end # module Walrus
