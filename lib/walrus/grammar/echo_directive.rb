# Copyright 2007-2010 Wincent Colaiuta. All rights reserved.
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

require 'walrus/grammar'

module Walrus
  class Grammar
    # "The #echo directive is used to echo the output from expressions that
    # can't be written as simple $placeholders."
    # http://www.cheetahtemplate.org/docs/users_guide_html_multipage/output.echo.html
    #
    # Convenient alternative short syntax for the #echo directive, similar to
    # ERB (http://www.ruby-doc.org/stdlib/libdoc/erb/rdoc/):
    #
    #   #= expression(s) #
    #
    # Is a shortcut equivalent to:
    #
    #   #echo expression(s) #
    #
    # This is similar to the ERB syntax, but even more concise:
    #
    #   <%= expression(s) =>
    #
    # See also the #silent directive, which also has a shortcut syntax.
    #
    class EchoDirective < Directive
      def compile options = {}
        if @expression.respond_to? :each
          expression = @expression
        else
          expression = [@expression]
        end

        # TODO: potentially include line, col and file name info in the
        # comments generated by the compiler

        compiled = "accumulate(instance_eval {\n" +
          expression.map { |expr| "  #{expr.compile}\n"}.join +
          "}) # Echo directive\n"
        compiled
      end
    end # class EchoDirective
  end # class Grammar
end # Walrus
